# RSU configuration file. Conforms with libconfig format.
#

Example =
{
  # ITS functionality
  ITS = {
    // Enable/Disable switch for the entire module
    Enable = true;

    Facilities = {
      // Regular CAMs
      CAM = {
        Enabled = true;
        // Optional RSU tolling  information
        RSUTolling = (
          { Latitude = 498557400, Longitude =  85880335, Radius = 250, Temporary = true, ProtID = 4002},
          { Latitude = 498558400, Longitude =  85880235, Radius = 150},
          { Latitude = 498559400, Longitude =  85880135}
        );
      };
      // Config for Stationary R-ITS
      DENM = {
        Enabled = true;

        RefDENMs = false;

        // EVENT1
        EVENT1 = {
          Enabled = true;

          OriginatingStationId     = 0x12345678;
          SequenceNumber           = 4;

          Duration                 = 60;    # Sec
          UpdatePeriod             = 30000; # mSec
          RepInterval              = 1000;  # mSec
	  EventOffsetAbsolute      = 0;     # 0=traces, eventHistory, startingPointSpeedLimit are relative values
	  		      	            # 1=traces, eventHistory, startingPointSpeedLimit are absolute values
          RelativeOffsetCumulative = 0;     # 0=offsets are relative to previous point
                                            # 1=offsets are relative to event position (Legacy feature)
          EventPositionSource      = 0;     # 0=use current GNSS position
                                            # 1=use config position,
          EventLatitude            = 0;     # Lat in tenths of microdegrees (if EventPositionSource = 1)
          EventLongitude           = 0;     # Long in tenths of microdegrees (if EventPositionSource = 1)
          EventAltitude            = 0;     # in centimetres (if EventPositionSource = 1)
          TrafficClass             = 0x02;  # DP2, no SCF
          InformationQuality       = 3;     # quality = 2

          LanePositionOption       = true;
          LanePosition             = 1;     # 1=innermostDrivingLane
 
          CauseCode                = 93;    # 93=humanProblem
          SubCauseCode             = 1;     # 1=childrenOnRoadway

          RelevanceTrafficDirection = 0;    # 0=All directions, 1=upstreamTraffic,
                                            # 2=downStreamTraffic, 3=oppositeTraffic
          RelevanceDistance = 1;            # 1=less than  100m, 2=less than 200m, 3=less than 500m,
                                            # 4=less than 1000m, 5=less than  5km, 6=less than 10km,
                                            # 7=over10km
        };
      };

      SPAT =  {
        Enabled = true;
        DynamicPhases = false;   # When set true, SPAT phases cycle according to phase periods (i.e. like normal signal)
                                 # When set false, SPAT phase remains in the future (relative to 'now') so never changes
                                 # (so phase duration is not reduced, which is useful in test environment)
        ApplInterval = 500;
        IntersectionId = 0x5566; # RSU intersection ID. This ID should match
                                 # IntersectionId of SPAT message to consider
        # Reload time period for difference signal phases - that is only used in
        # case of SPAT message transmission is dynamic (see DynamicPhases above)
        RedPhasePeriod = 260;    # Red state period (tength of sec)
        GreenPhasePeriod = 100;  # Green state period (tength of sec)
        YellowPhasePeriod = 30;  # Yellow state period (tength of sec)
        Movements =
        (
          # TimeToChange: Initial time to change of current phase (tenths of sec)
          #
          # CurrentState: Initial current signal color/state, where:
          #   0 = unavailable---------------------(OFF)
          #   1 = dark----------------------------(OFF)
          #   2 = stop_Then_Proceed---------------(RED)
          #   3 = stop_And_Remain-----------------(RED)
          #   4 = pre_Movement--------------------(maybe RED?)
          #   5 = permissive_Movement_Allowed-----(GREEN)
          #   6 = protected_Movement_Allowed------(GREEN)
          #   7 = permissive_clearance------------(YELLOW)
          #   8 = protected_clearance-------------(YELLOW)
          #   9 = caution_Conflicting_Traffic-----(maybe YELLOW?)
          #
          # Note: state and time are keeping changing by RSU logic, the values
          # below presenting the starting state/time for defined groups
          {
            SignalGroup  = 1;
            CurrentState = 3;
            TimeToChange = 130;
          },
          {
            SignalGroup = 2;
            CurrentState = 3;
            TimeToChange = 130;
          },
          {
            SignalGroup = 3;
            CurrentState = 6;
            TimeToChange = 100;
          },
          {
            SignalGroup = 4;
            CurrentState = 3;
            TimeToChange = 100;
          },
          {
            SignalGroup = 5;
            CurrentState = 6;
            TimeToChange = 100;
          },
          {
            SignalGroup = 6;
            CurrentState = 6;
            TimeToChange = 100;
          }
        )
      };

      MAP =  {
        Enabled = true;
        ApplInterval = 1000;
        IntersectionId = 0x5566; # RSU intersection ID. This ID should match
                                 # IntersectionId of SPAT message to consider
        Latitude = 498557400;    # RSU latitude in tenths of microdegrees
        Longitude = 85880335;    # RSU longitude in tenths of microdegrees
        Altitude = 10500;        # RSU altitude in cm (optional, remove Altitude if not required)
        Lanes =
        (
          {
            LaneId = 1,
            Nodes =
            (
              # X and Y (cm) for each node are calculated from end of last node
              {X = 2025, Y = -915},
              {X = 5215, Y = -5545}
            ),
            Connections =
            (
              # SignalGroup: Group that connection belongs to
              # ConnectsTo: Lane ID that lane connects to (should be valid)
              # Maneuver: between this lane and the one it connects to, where:
              #   0 = Undefined
              #   1 = Straight
              #   2 = Left
              #   3 = Right
              {SignalGroup = 1, ConnectsTo = 2, Maneuver = 2},
              {SignalGroup = 2, ConnectsTo = 3, Maneuver = 3}
            )
          },
          {
            LaneId = 2,
            Nodes =
            (
              # X and Y (cm) for each node are calculated from end of last node
              {X = -1250, Y = -1000},
              {X = -7420, Y = -5815}
            ),
            Connections =
            (
              # SignalGroup: Group that connection belongs to
              # ConnectsTo: Lane ID that lane connects to (should be valid)
              # Maneuver: between this lane and the one it connects to, where:
              #   0 = Undefined
              #   1 = Straight
              #   2 = Left
              #   3 = Right
              {SignalGroup = 3, ConnectsTo = 3, Maneuver = 1},
              {SignalGroup = 4, ConnectsTo = 1, Maneuver = 3}
            )
          },
          {
            LaneId = 3,
            Nodes =
            (
              # X and Y (cm) for each node are calculated from end of last node
              {X = 1330, Y = 1540},
              {X = 5275, Y = 4295}
            ),
            Connections =
            (
              # SignalGroup: Group that connection belongs to
              # ConnectsTo: Lane ID that lane connects to (should be valid)
              # Maneuver: between this lane and the one it connects to, where:
              #   0 = Undefined
              #   1 = Straight
              #   2 = Left
              #   3 = Right
              {SignalGroup = 5, ConnectsTo = 1, Maneuver = 2},
              {SignalGroup = 6, ConnectsTo = 2, Maneuver = 1}
            )
          }
        )
      };

      IVI =  {
        Enabled = true;
        ApplInterval = 2000;

        IVS =  {
          Enabled = true;

          IviIdentificationNumber = 1; # 0 - 32767
          # Service Provider as 'raw' 24-bit value
          # can also provide ServiceProviderCountryID and ServiceProviderIssuerId explicitly
          # CountryID is 2 characters, ITA2 encoded. '11000 11100'B is "AU"
          # ProviderID is 1 (i.e. '00000000000001'B)
          ServiceProviderRaw = 0xC70001; 

          ValidFrom = 0L;  # TAI2004 time in ms, 0 to remove option (NOTE: Use 'L' suffix)
                           # Values less than 3600000 are considered as delta values to add to current time
          ValidTo = 0L;    # TAI2004 time in ms, 0 to remove option (NOTE: Use 'L' suffix)
                           # Values less than 3600000 are considered as delta values to add to current time

          RefPositionSource        = 1;     # 0=use current GNSS position
                                            # 1=use config position,
          RefLatitude              = -349084140;     # Lat in tenths of microdegrees (Note: Ref Pos may not be in zones)
          RefLongitude             = 1386064720;     # Long in tenths of microdegrees (Note: Ref Pos may not be in zones)
          RefAltitude              = 800001;     # in centimetres, 800001 is 'unavailable'

          # Absolute positions used, can also use DetectionZoneOffset for relative positions
          # NOTE: Reference Position is not necessarily part of any zone, so initial position must be given
          DetectionZoneAbsolutePos =
          (
            {Lat = -349084140, Long = 1386064720},
            {Lat = -349081100, Long = 1386062320}
          )

          RelevanceZoneAbsolutePos =
          (
            {Lat = -349084140, Long = 1386064720},
            {Lat = -349087010, Long = 1386066930}
          )

          GIC =
          (
          {
            IviType                 = 1; # 1=regulatoryMessages
            RoadSigns =
            (
              # up to 4 road signs
              # This is 'slippery ice/snow'
              {
              ITSISO14823Code_4                 = 2,
              TrafficSignPictogram              = 0,
              PictogramCategoryCodeNature       = 1,
              PictogramCategoryCodeSerialNumber = 12,
              AttributesSPEValue                = 0,
              AttributesSPEUnits                = 0
              }
            )

            ExtraText =
            (
              # Up to 4 items
              # Language is 2 characters, ITA2 encoded. '10000 00110'B is "EN"
              {LayoutComponentId = 1, LanguageBitStr = 0x8180, TextContent = "A2 North"},
              {LayoutComponentId = 2, LanguageBitStr = 0x8180, TextContent = "Icy road conditions"}
            )
          }
          # Can add some pre-defined HGV-specific information
          #,{
          #  ApplicableLanes = (2);
          #  HGVInfo = 1
          #}
          )

        };

        IVS2 = {
          Enabled = true;

          IviIdentificationNumber = 2; # 0 - 32767
          # ServiceProviderCountryID and ServiceProviderIssuerId set individually
          # can also provide Service Provider as 'raw' 24-bit value
          # CountryID is 2 characters, ITA2 encoded. '11000 11100'B is "AU"
          # NOTE: ServiceProviderCountryID uses bottom 10 bits to store CountryID
          # ProviderID is 1 (i.e. '00000000000001'B)
          ServiceProviderCountryID = 0x31C; # 10 bits
          ServiceProviderIssuerId = 1; # 0 - 16383

          ValidFrom = 0L;  # TAI2004 time in ms, 0 to remove option (NOTE: Use 'L' suffix)
                           # Values less than 3600000 are considered as delta values to add to current time
          ValidTo = 0L;    # TAI2004 time in ms, 0 to remove option (NOTE: Use 'L' suffix)
                           # Values less than 3600000 are considered as delta values to add to current time

          RefPositionSource        = 1;     # 0=use current GPS position
                                            # 1=use config position,
          RefLatitude              = -349084140;     # Lat in tenths of microdegrees
          RefLongitude             = 1386064720;     # Long in tenths of microdegrees
          RefAltitude              = 800001;     # in centimetres, 800001 is 'unavailable'

          # Relative positions used, can also use DetectionZoneAbsolutePos for absolute positions
          # NOTE: Reference Position is not necessarily part of any zone, so initial offset must be given
          DetectionZoneOffset =
          (
            {Lat =    0, Long =     0},
            {Lat = 3040, Long = -2400}
          )

          RelevanceZoneOffset =
          (
            {Lat =     0, Long =    0},
            {Lat = -2870, Long = 2210}
          )

          GIC =
          (
          {
            RoadSigns =
            (
              # up to 4 road signs
              # This is 'slippery ice/snow'
              {
              ITSISO14823Code_4                 = 2,
              TrafficSignPictogram              = 0,
              PictogramCategoryCodeNature       = 1,
              PictogramCategoryCodeSerialNumber = 12,
              AttributesSPEValue                = 0,
              AttributesSPEUnits                = 0
              }
            )

            ExtraText =
            (
              # Up to 4 items
              # Language is 2 characters, ITA2 encoded. '10000 00110'B is "EN"
              {LayoutComponentId = 1, LanguageBitStr = 0x8180, TextContent = "A2 North"},
              {LayoutComponentId = 2, LanguageBitStr = 0x8180, TextContent = "Icy road conditions"}
            )
          }
          # Can add some pre-defined HGV-specific information
          #,{
          #  ApplicableLanes = (2);
          #  HGVInfo = 1
          #}
          )

        };
      };

      SA =  {
        Enabled = true;

        # Custom service Protocol Type
        # 0 = Unknown, 3 = GN, 6 = IPv6
        Protocol = 0;
        # Custom service ITS-AID (e.g. Ranging)
        ITSAID = 0x20409f;
        # Custom service SAM Application data (e.g. Ranging data)
        Data = [0x00, 0x28, 0x0c, 0x80, 0x06, 0x40];
      }

      RTCM =  {
        Enabled = false;

        # RTCM must be updated each interval
        ApplInterval = 5000;
        # RAW RTCM data (fixed, demo data)
        Data = [0xd3, 0x00, 0x09, 0x3f, 0x50, 0x01, 0xe6, 0x99];
      }

      VAM = {
        Enabled = false;
      };

      CPM = {
        Enabled = false;
      };

      IMZM = {
        Enabled = false;
      };

    }; // Facilities
  }; // ITS

}; // Example
