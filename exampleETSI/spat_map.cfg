# SPAT_MAP configuration file. Conforms with libconfig format.
#

Example =
{
  # ITS functionality
  ITS = {
    // Enable/Disable switch for the entire module
    Enable = true;

    Facilities = {
      // Regular CAMs
      CAM = {
        Enabled = true;
      };

      SPAT =  {
        Enabled = true;
        DynamicPhases = true;    # When set true, SPAT phases cycle according to phase periods (i.e. like normal signal)
                                 # When set false, SPAT phase remains in the future (relative to 'now') so never changes
                                 # (so phase duration is not reduced, which is useful in test environment)
        ApplInterval = 500;
        IntersectionId = 0x5566; # RSU intersection ID. This ID should match
                                 # IntersectionId of SPAT message to consider
        # Reload time period for difference signal phases - that is only used in
        # case of SPAT message transmission is dynamic (see DynamicPhases above)
        RedPhasePeriod = 260;    # Red state period (tength of sec)
        GreenPhasePeriod = 100;  # Green state period (tength of sec)
        YellowPhasePeriod = 30;  # Yellow state period (tength of sec)
        Movements =
        (
          # TimeToChange: Initial time to change of current phase (tenths of sec)
          #
          # CurrentState: Initial current signal color/state, where:
          #   0 = unavailable---------------------(OFF)
          #   1 = dark----------------------------(OFF)
          #   2 = stop_Then_Proceed---------------(RED)
          #   3 = stop_And_Remain-----------------(RED)
          #   4 = pre_Movement--------------------(maybe RED?)
          #   5 = permissive_Movement_Allowed-----(GREEN)
          #   6 = protected_Movement_Allowed------(GREEN)
          #   7 = permissive_clearance------------(YELLOW)
          #   8 = protected_clearance-------------(YELLOW)
          #   9 = caution_Conflicting_Traffic-----(maybe YELLOW?)
          #
          # Note: state and time are keeping changing by RSU logic, the values
          # below presenting the starting state/time for defined groups
          {
            SignalGroup  = 1, CurrentState = 3, TimeToChange = 130,
            SpeedAdvice =
            (
              # Speed units 0.1 metres/second
              # Distance unit metres
              # Type  0 = None, 1 = greenwave, 2 = ecoDrive, 3 = transit
              {Speed=0,   Distance=30,  Type=2},
              {Speed=56,  Distance=50,  Type=2},
              {Speed=111, Distance=100, Type=2}
            )
          },
          {
            SignalGroup = 2, CurrentState = 3, TimeToChange = 130,
            SpeedAdvice =
            (
              {Speed=0,   Distance=20,  Type=2},
              {Speed=83,  Distance=40,  Type=2},
              {Speed=139, Distance=200, Type=2}
            )
          },
          {
            SignalGroup = 3, CurrentState = 6, TimeToChange = 100,
            SpeedAdvice =
            (
              {Speed=0,  Distance=10,  Type=2},
              {Speed=34, Distance=60,  Type=2},
              {Speed=38, Distance=210, Type=2}
            )
          },
          {
            SignalGroup = 4, CurrentState = 6, TimeToChange = 100,
            SpeedAdvice =
            (
              {Speed=0,   Distance=15,  Type=2},
              {Speed=10,  Distance=25,  Type=2},
              {Speed=153, Distance=95,  Type=2}
            )
          },
          {
            SignalGroup = 5, CurrentState = 6, TimeToChange = 100
            SpeedAdvice =
            (
              {Speed=0,  Distance=28,  Type=2},
              {Speed=28, Distance=55,  Type=2},
              {Speed=69, Distance=150, Type=2}
            )
          },
          {
            SignalGroup = 6, CurrentState = 3, TimeToChange = 260
            SpeedAdvice =
            (
              {Speed=0,   Distance=27,  Type=2},
              {Speed=167, Distance=49,  Type=2},
              {Speed=222, Distance=180, Type=2}
            )
          }
        )
      };

      MAP =  {
        Enabled = true;
        ApplInterval = 1000;
        IntersectionId = 0x5566; # RSU intersection ID. This ID should match
                                 # IntersectionId of SPAT message to consider
        Latitude = 498557400;    # RSU latitude in tenths of microdegrees
        Longitude = 85880335;    # RSU longitude in tenths of microdegrees
        Lanes =
        (
          {
            LaneId = 1,
            AbsoluteNodes =
            (
              # Lat,lon for each node
              {Lat = 498556580, Lon = 85883160},
              {Lat = 498551590, Lon = 85890430}
            ),
            Connections =
            (
              # SignalGroup: Group that connection belongs to
              # ConnectsTo: Lane ID that lane connects to (should be valid)
              # Maneuver: between this lane and the one it connects to, where:
              #   0 = Undefined
              #   1 = Straight
              #   2 = Left
              #   3 = Right
              {SignalGroup = 1, ConnectsTo = 2, Maneuver = 2},
              {SignalGroup = 2, ConnectsTo = 3, Maneuver = 3}
            )
          },
          {
            LaneId = 2,
            AbsoluteNodes =
            (
              # Lat,lon for each node
              {Lat = 498556500, Lon = 85878590},
              {Lat = 498551270, Lon = 85868240}
            ),
            Connections =
            (
              # SignalGroup: Group that connection belongs to
              # ConnectsTo: Lane ID that lane connects to (should be valid)
              # Maneuver: between this lane and the one it connects to, where:
              #   0 = Undefined
              #   1 = Straight
              #   2 = Left
              #   3 = Right
              {SignalGroup = 3, ConnectsTo = 3, Maneuver = 1},
              {SignalGroup = 4, ConnectsTo = 1, Maneuver = 3}
            )
          },
          {
            LaneId = 3,
            AbsoluteNodes =
            (
              # Lat,lon for each node
              {Lat = 498558780, Lon = 85882190},
              {Lat = 498562650, Lon = 85889550}
            ),
            Connections =
            (
              # SignalGroup: Group that connection belongs to
              # ConnectsTo: Lane ID that lane connects to (should be valid)
              # Maneuver: between this lane and the one it connects to, where:
              #   0 = Undefined
              #   1 = Straight
              #   2 = Left
              #   3 = Right
              {SignalGroup = 5, ConnectsTo = 1, Maneuver = 2},
              {SignalGroup = 6, ConnectsTo = 2, Maneuver = 1}
            )
          }
        )
      };

    }; // Facilities
  }; // ITS

}; // Example
