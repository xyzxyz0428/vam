#!/bin/bash
# usage: see 'rc.aerolink help'
# Contains some 'bash'-isms, though it should work with not-too-strict 'sh' implementations.

# 0.62 - Support Aerolink v8 with moved directory locations
# 0.61 - Support more options for ETSI device initialisation
# 0.60 - Allow post PKI initialisation actions for a PKI profile
# 0.59 - Improve manual 'trustedcerts' loading
# 0.58 - hw-check for SXF1800 now ends key-injection phase
# 0.57 - Fix hw-check for SXF1800, add phase check and copy keyset0 file if possible
# 0.56 - Add option to clean out obsolete EU PKIs from CTL store
# 0.55 - Added SRM/SSM PSIDs (SAE J3268) to NA sections (ticket:15519)
# 0.54 - Use strings or grep for version string fetching
# 0.53 - Convert canonical ID to ASCII for convenience
# 0.52 - Check ACF builder status for cert conversion
# 0.51 - Add AT & CA cert info for CMS load
# 0.50 - TTW security context update
# 0.49 - Hardware mode extension
# 0.48 - Registration info query
# 0.47 - Platoon ITS-AID
# 0.46 - Support eaUrl option and auto-initialise after profiling
# 0.45 - Remove conversion for trailing slash in PKI APs - Aerolink OK now
# 0.44 - Support CMS certs with separate LCMs
# 0.43 - Update Aerolink environment handling
# 0.42 - Support CN demo OBU/RSU
# 0.41 - Remove OBS predefined ACFs for demo RSU config
# 0.40 - CRL placeholder required for ETSI cert import
# 0.39 - Create default cert/context for Upper Tester
# 0.38 - Demo CPM permissions for R-ITS
# 0.37 - LD_LIBRARY_PATH adapted for custom platforms
# 0.36 - New etsi demo certs for V-ITS/R-ITS
# 0.35 - Add CRLs for demo certs when loaded
# 0.34 - Add ETSI EC profile support
# 0.33 - Improved ETSI cert loading (without clearing config)
# 0.32 - GN ITS-AID has no SSP
# 0.31 - Text tidy up
# 0.30 - Workaround for lone, trailing slash in PKI APs
# 0.29 - Add support for binary format ETSI canonical ID
# 0.28 - Simplify EU cert conversion
# 0.27 - EU PKI helpers updated for Aerolink v6.7.0.0
# 0.26 - Add EU PKI helpers
# 0.25 - obuETSI support (Obahn/FSP)
# 0.24 - TS103097 v1.3.1 support (Aerolink v6)
# 0.23 - More robustness in EU ETSI cert handling
# 0.22 - EU v1.3.1 support (using IEEE certs/tools)
# 0.21 - GHS/ISS certificates in hardware mode
# 0.20 - SCMS request/response/export/import
# 0.19 - EU PKI supports C2C tool only
# 0.18 - Updates for NA cert directory changes
# 0.17 - SMX2 test, ACF creation check improved
# 0.16 - SRM permissions fixed for OBU
# 0.15 - New v2x-lib & aerolink folder layout + subsume rc.cert-translator
# 0.14 - Fix order of paramater parsing
# 0.13 - UTC time used for NA ACF creation
# 0.12 - Better handling for versioned Aerolink libraries
# 0.11 - Adapt for 'sh' & busybox
# 0.10 - Port aerolink_self_eu to Aerolink v4.4.0.0
# 0.9  - support SystemX certs (HW)
# 0.8  - support Escrypt certs
# 0.7  - support searching multiple PKI directories
# 0.6  - support US v3 certs
# 0.5  - support US certs
# 0.4  - support set config file & variable certs per set
# 0.3  - change strings to grep -aPo
# 0.2  - more options
# 0.1  - initial

# debug
#set -x
# verbose debug
#PS4='+ $(date +%T) ($(basename ${BASH_SOURCE:-$(pwd)}):${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'


# ITS-AIDs
# 0x24 CAM
# 0x25 DENM
# 0x89 SPAT
# 0x8a MAP
# 0x8b IVI
# 0x8c SRM
# 0x8d GN
# 0x26e CRL
# 0x26f SCR
# 0x270 CTL
# 0x272 CSPEED
# 0x27d SSM
# 0x27e VRU
# 0x27f CPM
# 0x280 IMZM
# 0x3FF Platoon
# 0x84081 SA
# 0x84082 GPC
# 0x1020407e IPV6_ROUTING

##############################################################################
# defaults
##############################################################################

if [ ! -z $EUID ] && [ $EUID -ne 0 ] ; then
  echo "Not root!"
  #exit -1 # EPERM = 1 = Operation not permitted
fi

DIR=`readlink -f ./`

if [ -z $PERSISTDIR ] ; then
  PERSISTDIR=$DIR
fi

# Local aerolink (with Aerolink tools)
if [ ! -d ${DIR}/aerolink ] ; then
  echo "No aerolink folder \"${DIR}/aerolink\" found"
  exit 2 # ENOENT =   2 = No such file or directory
fi

# v2x-lib libraries
V2XLIB_DIR=${DIR}/lib
# Aerolink tools
AEROLINK_TOOLS=${DIR}/aerolink
# Aerolink default config
AEROLINK_DEFAULT_CONFIG=${DIR}/aerolink/default
AEROLINK_EU_CONFIG=${AEROLINK_DEFAULT_CONFIG}/etsi
AEROLINK_NA_CONFIG=${AEROLINK_DEFAULT_CONFIG}/ieee
AEROLINK_CN_CONFIG=${AEROLINK_DEFAULT_CONFIG}/ccsa
# Aerolink application configuration and certs
# The default locations for Aerolink state directory is "." and for the
# config directory is "/etc/aerolink" so technically only need to use
# environment variables AEROLINK_STATE_DIR and AEROLINK_CONFIG_DIR when
# using different locations.
USER_STATE_DIR=${PERSISTDIR}/aerolink/active/state
USER_CONFIG_DIR=${PERSISTDIR}/aerolink/active/config
USER_LCMS_DIR=${USER_STATE_DIR}/lcms
USER_EU_ATCERTS_DIR=${USER_LCMS_DIR}/demoLcm
USER_CN_ATCERTS_DIR=${USER_LCMS_DIR}/ccsaLcm
USER_CACERTS_DIR=${USER_STATE_DIR}/scms-certificates


# set up AEROLINK environment
AEROLINK_PATHS="LD_LIBRARY_PATH=${V2XLIB_DIR}${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
AEROLINK_PATHS="${AEROLINK_PATHS} AEROLINK_CONFIG_DIR=${USER_CONFIG_DIR}"
AEROLINK_PATHS="${AEROLINK_PATHS} AEROLINK_STATE_DIR=${USER_STATE_DIR}"
AEROLINK_ENV="env ${AEROLINK_PATHS}"

# tools
ACFBUILDER="${AEROLINK_ENV}                   ${AEROLINK_TOOLS}/acfBuilder"
ACFEXTRACT="${AEROLINK_ENV}                   ${AEROLINK_TOOLS}/acfExtract"
ACFGENERATOR="${AEROLINK_ENV}                 ${AEROLINK_TOOLS}/acfGenerator"
ACFINFO="${AEROLINK_ENV}                      ${AEROLINK_TOOLS}/acfInfo"
CERTADM="${AEROLINK_ENV}                      ${AEROLINK_TOOLS}/certadm"
CERTGENERATOR="${AEROLINK_ENV}                ${AEROLINK_TOOLS}/certGenerator"
CREATEECREQUEST="${AEROLINK_ENV}              ${AEROLINK_TOOLS}/createECRequest"
CREATEETSIINITREQUEST="${AEROLINK_ENV}        ${AEROLINK_TOOLS}/createEtsiInitRequest"
CRLADM="${AEROLINK_ENV}                       ${AEROLINK_TOOLS}/crladm"
EXTRACTSIGNERTLMFROMECTL="${AEROLINK_ENV}     ${AEROLINK_TOOLS}/extractSignerTlmFromEctl"
IMPORTSYMMETRICENCRYPTIONKEY="${AEROLINK_ENV} ${AEROLINK_TOOLS}/importSymmetricEncryptionKey"
KEYPAIRGENERATOR="${AEROLINK_ENV}             ${AEROLINK_TOOLS}/keyPairGenerator"
PROCESSECRESPONSE="${AEROLINK_ENV}            ${AEROLINK_TOOLS}/processECResponse"
PROCESSETSIINITRESPONSE="${AEROLINK_ENV}      ${AEROLINK_TOOLS}/processEtsiInitResponse"
CANONICALDATAREADER="${AEROLINK_ENV}          ${AEROLINK_TOOLS}/canonicalDataReader"

CMSWSC="lcms = [
    {
        lcm_type                            pseudonym
        lcm_name                            upperTesterLcm_REPLACECERTID
        acf_prefix                          its
        use_scms                            false
    }
]"

##############################################################################
# parameter parsing
##############################################################################

# Optional certificate import directory
if [ $# -gt 1 ] ; then
  CERT_DIR=`readlink -f $2`
else
  # Search directories for PKI certs
  if [ -d ${DIR}/aerolink/certs ] ; then
    CERT_DIR=${DIR}/aerolink/certs
  elif [ -d /mnt/src/certs ] ; then
    CERT_DIR=/mnt/src/certs
  elif [ -d /mnt/rw/certs ] ; then
    CERT_DIR=/mnt/rw/certs
  else
    # Fallback location
    CERT_DIR=${DIR}/certs
  fi
fi

# Optional 'Set count'
if [ $# -gt 2 ] ; then
  SETCOUNT=$3
fi

##############################################################################
# helper functions
##############################################################################

certadm_load()
{
  # import root cert into database
  echo "Importing CA certs into LCM"
  CURRENT_DATE=`date -u`
  echo "UTC Time is ${CURRENT_DATE}"
  for CA in $*; do
    ${CERTADM} add ${CA}
    if [ $? -eq 0 ] ; then
      echo "Loaded cert ${CA}"
    else
      echo "Loading cert ${CA} FAILED"
    fi
  done

  # Show certs in LCM
  echo "LCM contains..."
  ${CERTADM} list
  echo -e "\n"
}

certadm_load_with_crl()
{
  # import root cert into database (with place-holder CRL)
  echo "Importing CA certs into LCM (with place-holder CRL)"
  CURRENT_DATE=`date -u`
  echo "UTC Time is ${CURRENT_DATE}"
  for CA in $*; do
    # Use cert ID name to later identify Root CA certs that need CRL
    CERTID=$(grep -aPo '[A-Za-z0-9 _-]{8,}' ${CA})
    ${CERTADM} add ${CA}
    if [ $? -eq 0 ] ; then
      echo "Loaded cert ${CA} (ID is '${CERTID}')"
    else
      echo "Loading cert ${CA} FAILED"
    fi
    if [ ! -z "${CERTID}" ]; then
      ${CERTADM} list | grep '00 00 00 00 00 00 00 00' | grep "${CERTID}" | while read line
      do
        HASHEDID8=`echo $line | awk '{print $2$3$4$5$6$7$8$9}'`
        echo "Place-holder CRL for cert ${HASHEDID8}"
        ${CRLADM} add-placeholder ${HASHEDID8}
      done
    fi
  done

  # Show certs in LCM
  echo "LCM contains..."
  ${CERTADM} list

  # Show CRLs
  echo "CRL contains..."
  ${CRLADM} list
  echo -e "\n"
}

##############################################################################
# functions
##############################################################################

aerolink_clear()
{
  # Remove aerolink state & config
  if [ -d ${USER_STATE_DIR} ] ; then
    echo "WARN: Removing existing aerolink state directory: ${USER_STATE_DIR}"
  fi
  if [ -d ${USER_CONFIG_DIR} ] ; then
    echo "WARN: Removing existing aerolink config directory: ${USER_CONFIG_DIR}"
  fi
  rm -rf ${USER_STATE_DIR}
  rm -rf ${USER_CONFIG_DIR}

  # Warn about default locations as they can confuse when Aerolink tools not properly executed
  if [ -d /etc/aerolink ] ; then
    echo "WARN: existing aerolink config directory in default location: /etc/aerolink"
  fi
}

aerolink_cert_check()
{
  # The intention is that this only reads Aerolink data/config and can
  # therefore be used during application execution
  if [ ! -r ${USER_STATE_DIR} ] ; then
    echo -e "\nERROR: Aerolink state not readable at ${USER_STATE_DIR}"
  else
    echo -e "\nLCM contains..."
    ${CERTADM} list
    echo -e "\n"

    echo -e "\nCRL contains..."
    ${CRLADM} list
    echo -e "\n"

    ACFCOUNT=`find ${USER_LCMS_DIR} -maxdepth 2 -name '*.acf' -type f | wc -l`
    if [ ${ACFCOUNT} -gt 0 ] ; then
      echo "Found ${ACFCOUNT} ACF files in Aerolink state"

      ACF=`ls -1 ${USER_LCMS_DIR}/*/*.acf 2> /dev/null | head -n 1`
      if [ -n "${ACF}" ] ; then
        echo -e "\nFirst ACF file (${ACF}) parameters..."
        ${ACFINFO} ${ACF}
        # acfInfo with -v option add signing key output
        echo -e "\nFirst ACF index (0) contains..."
        ${ACFINFO} -v ${ACF} 0
      fi
      if [ ${ACFCOUNT} -gt 1 ] ; then
        ACF=`ls -1 ${USER_LCMS_DIR}/*/*.acf | tail -n 1`
        if [ -n "${ACF}" ] ; then
          echo -e "\nLast ACF file (${ACF}) parameters..."
          ${ACFINFO} ${ACF}
          # acfInfo with -v option add signing key output
          echo -e "\nLast ACF index (0) contains..."
          ${ACFINFO} -v ${ACF} 0
        fi
      fi

    else
      echo -e "\nWARN: No ACF files in Aerolink state"
    fi
  fi
}

aerolink_hw_check()
{
    # HSM test
    if [ -x /opt/cohda/bin/smx2_hw_test ] ; then
      echo -e "\nHSM (SXA1700) test:"
      /opt/cohda/bin/smx2_hw_test
    elif [ -x /opt/nxp/bin/v2xse-se-info ] ; then
      echo -e "\nHSM (SXF1800) test:"
      /opt/nxp/bin/v2xse-se-info
    else
      echo -e "\nNo HSM test utility"
    fi

    # SXF1800 check for 'normal' operating phase
    if [ -x /opt/nxp/bin/v2xse-sanity-app ] ; then
      # SXF1800 commands need keyset0 in local directory
      if [ ! -e ./v2xscppalutil.bin -a -e /opt/nxp/bin/v2xscppalutil.bin ]; then
        echo -e "\nCopying default keyset0"
        cp /opt/nxp/bin/v2xscppalutil.bin .
      fi
      # Check SXF1800 is normal phase for signing for each 'applet'
      if [ -e ./v2xscppalutil.bin ]; then
        ENDKEYINJ=0
        echo -e "\nHSM (SXF1800) EU check:"
        /opt/nxp/bin/v2xse-sanity-app -a 0 -p 1 | grep  'ERROR\|INFO.*phase\|Sanity'
        if [ ${PIPESTATUS[0]} -ne 0 ] ; then
          ENDKEYINJ=1
        fi
        echo -e "\nHSM (SXF1800) NA check:"
        /opt/nxp/bin/v2xse-sanity-app -a 1 -p 1 | grep  'ERROR\|INFO.*phase\|Sanity'
        if [ ${PIPESTATUS[0]} -ne 0 ] ; then
          ENDKEYINJ=1
        fi
        if [ ${ENDKEYINJ} -eq 1 ] ; then
          # end key-injection phase
          echo -e "\nEnding key-injection phase..."
          /opt/cohda/bin/end-sxf1800-key-injection
        fi
      else
        echo -e "\nNo local HSM keyset0 file"
      fi
    fi

    # dispatcher test (MK5 only)
    if [ -x /opt/nxp/bin/dispatcher-tester -a "$( pgrep -x disp_server )" != "" ]; then
      echo -e "\nDispatcher test:"
      /opt/nxp/bin/dispatcher-tester verify 500
    fi
}

aerolink_check()
{
  # The intention is that this only reads Aerolink data/config and can
  # therefore be used during application execution
  if [ ! -d ${V2XLIB_DIR} ] ; then
    echo "ERROR: libraries missing from ${V2XLIB_DIR}"
  else
    AEROLIB=`find ${V2XLIB_DIR}/libviicsec.so* -name 'lib*' -type f | head -n 1`
    echo -e "\nAerolink library version (${AEROLIB}):"
    if [ -e /usr/bin/strings ]; then
      strings ${AEROLIB} | grep '[5-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+'
    else
      grep -aPo '[5-9]+\.[0-9]+\.[0-9]+\.[0-9]+' ${AEROLIB}
    fi
  fi

  if [ ! -d ${AEROLINK_TOOLS} ] ; then
    echo -e "\nERROR: Aerolink tools missing from ${AEROLINK_TOOLS} (require certadm, acfInfo)"
  else
    echo -e "\nAerolink tools:"
    ls -p ${AEROLINK_TOOLS}
    echo -e ""
  fi

  if [ ! -d ${AEROLINK_EU_CONFIG} ] ; then
    echo -e "\nERROR: Default Aerolink config missing from ${AEROLINK_EU_CONFIG} (require state, config....)"
  fi

  if [ ! -d ${AEROLINK_NA_CONFIG} ] ; then
    echo -e "\nERROR: Default Aerolink config missing from ${AEROLINK_NA_CONFIG} (require state, config....)"
  fi

  if [ ! -d ${AEROLINK_CN_CONFIG} ] ; then
    echo -e "\nERROR: Default Aerolink config missing from ${AEROLINK_CN_CONFIG} (require state, config....)"
  fi

  if [ ! -r ${USER_STATE_DIR} ] ; then
    echo -e "\nERROR: Aerolink state not readable at ${USER_STATE_DIR}"
  else
    echo -e "\nAerolink state: ${USER_STATE_DIR}"
    ls ${USER_STATE_DIR}
    if [ -e ${USER_CONFIG_DIR}/aerolink.conf ] ; then
      echo -e "\nAerolink config: ${USER_CONFIG_DIR}/aerolink.conf"
      grep 'hsm_solution' ${USER_CONFIG_DIR}/aerolink.conf
      grep 'verification_solution' ${USER_CONFIG_DIR}/aerolink.conf
      grep 'message_protocol' ${USER_CONFIG_DIR}/aerolink.conf
      grep 'pki_type' ${USER_CONFIG_DIR}/aerolink.conf
    else
      echo -e "\nNo Aerolink config"
    fi

    if [ -e ${USER_CONFIG_DIR}/deviceId/device.info ]; then
      echo -e "\nDevice ID information:"
      ${CANONICALDATAREADER}
      if [ -e /usr/bin/xxd ]; then
        echo -e "Canonical ID (ASCII):"
        ${CANONICALDATAREADER} | grep 'Canonical ID' | sed 's/Canonical ID: //' | xxd -r -p
        echo -e "\n"
      fi
    else
      echo -e "\nNo Device ID information\n"
    fi
    WSC=`ls -1 ${USER_STATE_DIR}/security-context*/*.wsc 2> /dev/null | head -n 1`
    if [ -n "${WSC}" ] ; then
      echo -e "\nAerolink security-context: First WSC file (${WSC}) parameters..."
      cat ${WSC}
    fi

    aerolink_cert_check

  fi

  if [ ! -d ${CERT_DIR} ] ; then
    echo -e "\nWARN: No original certificate directory at ${CERT_DIR} (required for conversion to ACF)"
  fi
}

aerolink_env()
{
    # Provide details of environment command to use Aerolink tools without
    # setting lots of local variables.
    # The absolute paths option attempts to replace the typical relative paths of the
    # locally defined variables (starting with '.') with the current directory.
    echo "Paste this command into your terminal to set environment for using Aerolink utilities"
    echo
    echo "export AEROLINK_CONFIG_DIR=${USER_CONFIG_DIR}; "\
         "export AEROLINK_STATE_DIR=${USER_STATE_DIR}; " \
         "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${V2XLIB_DIR} " \
         "export PATH=${AEROLINK_TOOLS}:\$PATH"
    echo
}

aerolink_eu_stack_conf()
{
  # Fetch the ITS-AIDs & SSP settings based on certificate contents

  # cert name -> 'its.wsc' contents
  ACFCOUNT=`find ${USER_EU_ATCERTS_DIR} -maxdepth 1 -name '*.acf' -type f | wc -l`
  if [ ${ACFCOUNT} -lt 1 ] ; then
    echo "No ACF file found in ${USER_EU_ATCERTS_DIR}"
    return
  fi

  echo "WSC should contain:"
  FIRSTACF=`ls -1 ${USER_EU_ATCERTS_DIR}/*.acf | head -n 1`
  STEM=`echo ${FIRSTACF} | sed s'/-[0-9]\+\.acf$//' | sed 's/^.*certificates\///'`
  echo "    lcm_directory certificates";
  echo "    acf_prefix    ${STEM}";

  echo "CONFIG should contain:"
  # sxa1700 -> Cohda_Crypto_SMX_Check=1
  CONF_CRYPTO=`grep 'hsm_solution' ${USER_CONFIG_DIR}/aerolink.conf | sed 's/hsm_solution \(\w\+\).*/\1/'`
  if [ "$CONF_CRYPTO" = "sxa1700" ] ; then
    echo "    Cohda_Crypto_SMX_Check      = 1";
  else
    echo "    Cohda_Crypto_SMX_Check      = 0";
  fi

  if [ "${USER_STATE_DIR}" != "./aerolink/active" ] ; then
    echo "    Cohda_Crypto_AeroStateDir   = ${USER_STATE_DIR}"
  else
    echo "    Cohda_Crypto_AeroStateDir   ="
  fi
  if [ "${USER_CONFIG_DIR}" != "./aerolink/active" ] ; then
    echo "    Cohda_Crypto_AeroConfigDir  = ${USER_CONFIG_DIR}"
  else
    echo "    Cohda_Crypto_AeroConfigDir  ="
  fi

  # cert contents
  AID="`${ACFINFO} ${FIRSTACF} 0 | grep -C 1 'psid(0x24)'`"
  if [ -z "${AID}" ] ; then
    echo "    #NOTE: CAM ITS-AID (0x24) not found in cert, CAM signing will not work!"
  fi
  AID="`${ACFINFO} ${FIRSTACF} 0 | grep -C 1 'psid(0x25)'`"
  if [ -z "${AID}" ] ; then
    echo "    #NOTE: DENM ITS-AID (0x25) not found in cert, DENM signing will not work!"
  fi
  AID="`${ACFINFO} ${FIRSTACF} 0 | grep -C 1 'psid(0x89)'`"
  if [ -z "${AID}" ] ; then
    echo "    #NOTE: SPAT ITS-AID (0x89) not found in cert, SPAT signing will not work!"
  fi
  AID="`${ACFINFO} ${FIRSTACF} 0 | grep -C 1 'psid(0x8a)'`"
  if [ -z "${AID}" ] ; then
    echo "    #NOTE: MAP ITS-AID (0x8a) not found in cert, MAP signing will not work!"
  fi
  AID="`${ACFINFO} ${FIRSTACF} 0 | grep -C 1 'psid(0x8b)'`"
  if [ -z "${AID}" ] ; then
    echo "    #NOTE: IVI ITS-AID (0x8b) not found in cert, IVI signing will not work!"
  fi
  AID="`${ACFINFO} ${FIRSTACF} 0 | grep -C 1 'psid(0x8c)'`"
  if [ -z "${AID}" ] ; then
    echo "    #NOTE: SRM ITS-AID (0x8c) not found in cert, SRM signing will not work!"
  fi
  AID="`${ACFINFO} ${FIRSTACF} 0 | grep -C 1 'psid(0x27d)'`"
  if [ -z "${AID}" ] ; then
    echo "    #NOTE: SSM ITS-AID (0x27d) not found in cert, SSM signing will not work!"
  fi
  AID="`${ACFINFO} ${FIRSTACF} 0 | grep -C 1 'psid(0x8d)'`"
  if [ -z "${AID}" ] ; then
    echo "    #NOTE: GN-MGMT ITS-AID (0x8d) not found in cert, GN-MGMT signing will not work!"
  fi
}

aerolink_eu_cms_load()
{
  if [ ! -d ${CERT_DIR} ] ; then
    echo "CMS original cert directory (${CERT_DIR}) doesn't exist"
    return
  fi

  echo "Import CMS certificates from ${CERT_DIR}"

  # Files to convert
  CERTCOUNT=`ls ${CERT_DIR}/CERT*_AT*.oer 2>/dev/null | wc -l`
  echo "Found ${CERTCOUNT} AT certs"

  # Convert & rename CA/AT certs to necessary extensions
  echo "Renaming AT cert files"
  for AT in $(ls ${CERT_DIR}/CERT*.oer 2>/dev/null); do
    cp ${AT} ${AT%.oer}.cert
  done

  # Convert & rename signing keys to necessary extensions
  # .priv file needs same 'stem' as cert file for acfBuilder
  echo "Renaming signing key files"
  for AT in $(ls ${CERT_DIR}/CERT*.vkey 2>/dev/null); do
    cp ${AT} ${AT%.vkey}.priv
  done

  # Security conformance needs ETSI-provided certs
  certadm_load_with_crl $(ls ${CERT_DIR}/CERT*_AA*.oer ${CERT_DIR}/CERT*_RCA*.oer)

  rm -rf ${CERT_DIR}/certs_ca
  mkdir ${CERT_DIR}/certs_ca

  # CA certs info via acfBuilder & acfInfo
  # Yes, this is convoluted...
  echo "Info from CA certs..."
  # Convert each cert into separate ACF
  for CA in $(ls ${CERT_DIR}/CERT*_RCA*.oer ${CERT_DIR}/CERT*_AA*.oer); do
    BASE=$(basename ${CA})
    STEM=${BASE%.*}
    mkdir ${CERT_DIR}/certs_ca/${STEM}
    mkdir -p ${USER_STATE_DIR}/ca_certificates/${STEM}
    cp ${CERT_DIR}/${STEM}.* ${CERT_DIR}/certs_ca/${STEM}
    # Aerolink Translator
    ( ${ACFBUILDER} \
      --input ${CERT_DIR}/certs_ca/${STEM} \
      --output ${USER_STATE_DIR}/ca_certificates/${STEM}/its \
      --CAK ; )
    if [ $? -eq 0 ]; then
      ACF=`ls ${USER_STATE_DIR}/ca_certificates/${STEM}/*.acf`
      echo "Created ${ACF}, contents:"
      ${ACFINFO} -v ${ACF} 0
    else
      echo "Converting CA cert ${STEM} FAILED"
      # Remove likely 0-sized ACF
      rm ${USER_LCMS_DIR}/${STEM}/its*
    fi
    echo ""
  done

  rm -rf ${CERT_DIR}/certs_at
  mkdir ${CERT_DIR}/certs_at

  # Translate AT certs
  echo "Translate AT certs..."
  # Convert each cert into separate ACF
  for AT in $(ls ${CERT_DIR}/CERT*_AT*.cert); do
    BASE=$(basename ${AT})
    STEM=${BASE%.*}
    mkdir ${CERT_DIR}/certs_at/${STEM}
    cp ${CERT_DIR}/${STEM}.* ${CERT_DIR}/certs_at/${STEM}
    # Aerolink Translator
    ( set -x; ${ACFBUILDER} \
      --input ${CERT_DIR}/certs_at/${STEM} \
      --output ${CERT_DIR}/certs_at/${STEM}/its \
      --CAK ; )
    if [ $? -eq 0 ]; then
      ACF=`ls ${CERT_DIR}/certs_at/${STEM}/*.acf`
      echo "Created ${ACF}, contents:"
      ${ACFINFO} -v ${ACF} 0
    else
      echo "Converting AT cert ${STEM} FAILED"
      # Remove likely 0-sized ACF
      rm ${CERT_DIR}/certs_at/${STEM}/its*
    fi
    echo ""
  done

  CERTCOUNT=`ls ${CERT_DIR}/certs_at/*/*.acf | wc -l`
  echo "Found ${CERTCOUNT} ACF files"

  # Create appropriate security contexts
  echo "Security contexts..."
  CMSDEFCERT=CERT_IUT_A_AT
  # Get certId8
  for ACF in $(ls ${CERT_DIR}/certs_at/*/*.acf); do
    CERTID=`${ACFINFO} ${ACF} 0 | grep 'certid10' | sed 's/ //g' | sed 's/certid10://' | sed 's/^....//'`
    DIRSTEM=$(dirname ${ACF})
    STEM=$(basename ${DIRSTEM})
    # Create .wsc
    echo "${CMSWSC}" > ${USER_STATE_DIR}/security-context/${CERTID}.wsc
    THIS=$(basename $(dirname ${ACF}))
    sed -i "s/REPLACECERTID/${CERTID}/" ${USER_STATE_DIR}/security-context/${CERTID}.wsc
    echo "Created ${USER_STATE_DIR}/security-context/${CERTID}.wsc for ${THIS}"
    mkdir ${USER_LCMS_DIR}/upperTesterLcm_${CERTID}
    cp ${CERT_DIR}/certs_at/${STEM}/its* ${USER_LCMS_DIR}/upperTesterLcm_${CERTID}
    if [ "${THIS}" = "${CMSDEFCERT}" ] ; then
      # One default security-context when no specific cert is requested
      cp ${USER_STATE_DIR}/security-context/${CERTID}.wsc ${USER_STATE_DIR}/security-context/0000000000000000.wsc
      rm -rf ${USER_LCMS_DIR}/upperTesterLcm_0000000000000000
      mkdir ${USER_LCMS_DIR}/upperTesterLcm_0000000000000000
      cp -R ${CERT_DIR}/certs_at/${STEM}/its* ${USER_LCMS_DIR}/upperTesterLcm_0000000000000000
      sed -i "s/${CERTID}/0000000000000000/" ${USER_STATE_DIR}/security-context/0000000000000000.wsc
      echo "Created ${USER_STATE_DIR}/security-context/0000000000000000.wsc for DEFAULT"
    fi
  done
}

aerolink_eu_etsi_load()
{
  if [ ! -d ${CERT_DIR} ] ; then
    echo "ETSI original cert directory (${CERT_DIR}) doesn't exist"
    return
  fi

  echo "Import ETSI certificates"

  # Put CA certs in Aerolink-readable bundle
  # CA certs in trustedcerts
  # A 'place-holder' CRL is created for all manually loaded trusted certs

  if [ -e ${CERT_DIR}/trustedcerts ]; then
    # import root cert into database
    certadm_load_with_crl $(ls ${CERT_DIR}/trustedcerts/*)
  fi

  # Put AT certs in Aerolink-readable bundle
  # AT certs in downloads/0, downloads/1, etc... for each validity period
  # AT cert in OER binary with .cert extension
  # AT signing key in binary with .priv extension (32 bytes)

  if [ -e ${CERT_DIR}/downloads ]; then
    # Convert & rename AT certs to necessary extensions
    ETSICOUNT=`ls ${CERT_DIR}/downloads/*/*.etsi 2>/dev/null | wc -l`
    if [ ${ETSICOUNT} -gt 0 ] ; then
      echo "Renaming AT cert files"
      for AT in $(ls ${CERT_DIR}/downloads/*/*.etsi); do
        cp ${AT} ${AT%.etsi}.cert
      done
    fi

    # Convert & rename signing keys to necessary extensions
    ETSICOUNT=`ls ${CERT_DIR}/downloads/*/*.vkey 2>/dev/null | wc -l`
    if [ ${ETSICOUNT} -gt 0 ] ; then
      echo "Renaming signing key files"
      for AT in $(ls ${CERT_DIR}/downloads/*/*.vkey); do
        cp ${AT} ${AT%.vkey}.priv
      done
    fi

    # Files to convert
    CERTCOUNT=`ls ${CERT_DIR}/downloads/*/*.cert 2>/dev/null | wc -l`
    echo "Found ${CERTCOUNT} binary AT certs"

    if [ ${CERTCOUNT} -gt 0 ] ; then
      # Recursively convert pseudonym certs to ACF
      echo "Recurse bundle ${CERT_DIR}/downloads"
      ( set -x; ${ACFBUILDER} \
        --input  ${CERT_DIR}/downloads \
        --output ${USER_EU_ATCERTS_DIR}/its \
        --recursive --CAK ; )

      ITS_CERTCOUNT=`ls ${USER_EU_ATCERTS_DIR}/its*.acf | wc -l`
      echo "Found ${ITS_CERTCOUNT} ACF files for ITS"
    fi
  fi
}

aerolink_eu_ghs_sw_load()
{
  if [ ! -d ${CERT_DIR} ] ; then
    echo "Original cert directory (${CERT_DIR}) doesn't exist"
    return
  fi

  echo "Import GHS certificates in internal mode"

  aerolink_eu_clear_setup

  # Assume v6 Aerolink & associated utilities that automatically handle
  # binary & ASCII input files

  # import root cert into database
  certadm_load $(ls ${CERT_DIR}/trustedcerts/[ra]*)

  # Recursively convert pseudonym certs to ACF
  echo "Recurse bundle ${CERT_DIR}/downloads"
  ( set -x; ${ACFBUILDER} \
    --input  ${CERT_DIR}/downloads \
    --output ${USER_EU_ATCERTS_DIR}/its \
    --recursive --CAK ; )

  ITS_CERTCOUNT=`ls ${USER_EU_ATCERTS_DIR}/its*.acf | wc -l`
  echo "Found ${ITS_CERTCOUNT} ACF files for ITS"
}

aerolink_eu_ghs_hw_load()
{
  if [ ! -d ${CERT_DIR} ] ; then
    echo "Original cert directory (${CERT_DIR}) doesn't exist"
    return
  fi

  echo "Import GHS certificates in sxa1700 mode"

  aerolink_eu_clear_setup

  sed -i 's/hsm_solution .*/hsm_solution sxa1700/' ${USER_CONFIG_DIR}/aerolink.conf

  # Assume v6 Aerolink & associated utilities that automatically handle
  # binary & ASCII input files

  # import root cert into database
  certadm_load $(ls ${CERT_DIR}/trustedcerts/[ra]*)

  # Recursively convert pseudonym certs to ACF
  echo "Recurse bundle ${CERT_DIR}/downloads"
  ( set -x ; ${ACFBUILDER} \
    --input  ${CERT_DIR}/downloads \
    --output ${USER_EU_ATCERTS_DIR}/its \
    --recursive --CAK ; )

  ITS_CERTCOUNT=`ls ${USER_EU_ATCERTS_DIR}/its*.acf | wc -l`
  echo "Found ${ITS_CERTCOUNT} ACF files for ITS"
}

aerolink_na_ghs_setup()
{
  if [ ! -d ${CERT_DIR} ] ; then
    echo "GHS original cert directory (${CERT_DIR}) doesn't exist"
    return
  fi

  # Restore fresh aerolink config
  mkdir -p ${USER_STATE_DIR}
  mkdir -p ${USER_CONFIG_DIR}
  cp -r ${CERT_DIR}/state/* ${USER_STATE_DIR}
  cp -r ${CERT_DIR}/config/* ${USER_CONFIG_DIR}
  rm -f ${USER_LCMS_DIR}/*/*.acf
  rm -f ${USER_STATE_DIR}/wscs/*
  echo "Created aerolink state and config directories: ${USER_STATE_DIR} and ${USER_CONFIG_DIR}"
}

aerolink_na_ghs_sw_load()
{
  echo "Import GHS certificates in internal mode"
  aerolink_na_ghs_setup

  for GHS_BUNDLE_DIR in ${CERT_DIR}/download/* ; do
    # Import root and CA before translating
    ${CERTADM} add ${GHS_BUNDLE_DIR}/trustedcerts/ra
    ${CERTADM} add ${GHS_BUNDLE_DIR}/trustedcerts/rca
    ${CERTADM} add ${GHS_BUNDLE_DIR}/trustedcerts/ica
    ${CERTADM} add ${GHS_BUNDLE_DIR}/trustedcerts/pca

    # Import pseudonym certs
    cd ${GHS_BUNDLE_DIR}; \

    if [ -d ${GHS_BUNDLE_DIR}/download ] ; then
      echo "Found GHS obe bundle ${GHS_BUNDLE_DIR}"

      ${ACFBUILDER} \
        --recursive \
        --binaryCaterpillarKey ${GHS_BUNDLE_DIR}/dwnl_sgn.priv \
        --binaryExpansionKey  ${GHS_BUNDLE_DIR}/sgn_expnsn.key \
        --input  ${GHS_BUNDLE_DIR}/download \
        --output ${USER_LCMS_DIR}/bsmLcm/psid0x20 ; \
    elif [ -d ${GHS_BUNDLE_DIR}/downloadFiles ] ; then
      echo "Found GHS rsu bundle ${GHS_BUNDLE_DIR}"

      ${ACFBUILDER} \
        --recursive \
        --binaryInitialKey ${GHS_BUNDLE_DIR}/dwnl_sgn.priv \
        --input  ${GHS_BUNDLE_DIR}/downloadFiles \
        --output ${USER_LCMS_DIR}/rsuLcm/psid0x87 ; \
    fi

    cd -
  done

  BSM_CERTCOUNT=`ls ${USER_LCMS_DIR}/bsmLcm/*.acf | wc -l`
  RSU_CERTCOUNT=`ls ${USER_LCMS_DIR}/rsuLcm/*.acf | wc -l`
  echo "Found ${BSM_CERTCOUNT} ACF files for BSM, ${RSU_CERTCOUNT} ACF files for RSU"
}

aerolink_na_ghs_hw_load()
{
    echo "Import GHS certificates in sxa1700 mode"
    aerolink_na_ghs_setup

    for GHS_BUNDLE_DIR in ${CERT_DIR}/download/* ; do
      # Import root and CA before translating
      ${CERTADM} add ${GHS_BUNDLE_DIR}/trustedcerts/ra
      ${CERTADM} add ${GHS_BUNDLE_DIR}/trustedcerts/rca
      ${CERTADM} add ${GHS_BUNDLE_DIR}/trustedcerts/ica
      ${CERTADM} add ${GHS_BUNDLE_DIR}/trustedcerts/pca

      # Import pseudonym certs
      cd ${GHS_BUNDLE_DIR};

      if [ ! -e ${GHS_BUNDLE_DIR}/dwnl_sgn.priv ] ; then
          echo "ERROR: dwnl_sgn.priv missing"
          return
      else
          echo "Private Key Slot:"
          cat ${GHS_BUNDLE_DIR}/dwnl_sgn.priv
      fi

      if [ -d ${GHS_BUNDLE_DIR}/download ] ; then
        echo "Found GHS obe bundle ${GHS_BUNDLE_DIR}"

        ${ACFBUILDER} \
          --recursive \
          --caterpillarKey ${GHS_BUNDLE_DIR}/dwnl_sgn.priv \
          --binaryExpansionKey  ${GHS_BUNDLE_DIR}/sgn_expnsn.key \
          --input  ${GHS_BUNDLE_DIR}/download \
          --output ${USER_LCMS_DIR}/bsmLcm/psid0x20 ; \
      elif [ -d ${GHS_BUNDLE_DIR}/downloadFiles ] ; then
        echo "Found GHS rse bundle ${GHS_BUNDLE_DIR}"

        ${ACFBUILDER} \
          --recursive \
          --initialKey ${GHS_BUNDLE_DIR}/dwnl_sgn.priv \
          --input  ${GHS_BUNDLE_DIR}/downloadFiles \
          --output ${USER_LCMS_DIR}/rsuLcm/psid0x87 ; \
      fi

      cd -
    done

  BSM_CERTCOUNT=`ls ${USER_LCMS_DIR}/bsmLcm/*.acf | wc -l`
  RSU_CERTCOUNT=`ls ${USER_LCMS_DIR}/rsuLcm/*.acf | wc -l`
  echo "Found ${BSM_CERTCOUNT} ACF files for BSM, ${RSU_CERTCOUNT} ACF files for RSU"
}


aerolink_na_ttw_load()
{
  if [ ! -d ${CERT_DIR} ] ; then
    echo "TTW original cert directory (${CERT_DIR}) doesn't exist"
    return
  fi

  # Restore fresh aerolink config
  mkdir -p ${USER_STATE_DIR}
  mkdir -p ${USER_CONFIG_DIR}
  cp -r ${CERT_DIR}/state/* ${USER_STATE_DIR}
  cp -r ${CERT_DIR}/config/* ${USER_CONFIG_DIR}
  echo "Created aerolink state and config directories: ${USER_STATE_DIR} and ${USER_CONFIG_DIR}"

  # Import root and CA before translating
  ${CERTADM} add ${USER_CACERTS_DIR}/rca.cert
  ${CERTADM} add ${USER_CACERTS_DIR}/ica.cert
  ${CERTADM} add ${USER_CACERTS_DIR}/pca.cert

  CERTCOUNT=`ls ${USER_LCMS_DIR}/*/*.acf | wc -l`
  echo "Found ${CERTCOUNT} ACF files"
}

aerolink_eu_demo_generate()
{
  # NOTE: Only ACF utilities are typically added to Aerolink 'bin', see Aerolink Makefile to add cert generator
  if [ ! -e ${AEROLINK_TOOLS}/certGenerator ] ; then
    echo "Sorry, the certGenerator tool to generate Root, AA & AT EU certs is unavailable"
    return
  fi

  aerolink_eu_clear_setup

  # Create whole chain of certs using Aerolink utilities
  # Names of certs ("--output" option) seem to need to be less than 8 characters
  # NOTE: This is example only, as regenerating a new Root cert each time is unrealistic

  # Create root cert
  ( set -x; ${CERTGENERATOR} \
    --selfSigned \
    --certType explicit \
    --certId N:"Cohda Demo Root" \
    --start 2020-1-1 \
    --duration 15y \
    --certIssuePermissions all,1,-1,both \
    --signingCurve brainpoolp256 \
    --output root )

  # Create AA (V-ITS) cert
  # All ITS-AIDs allowed
  ( set -x; ${CERTGENERATOR} \
    --certType explicit \
    --signerCert root.cert \
    --signerKey root.signKey \
    --certId N:"Cohda Demo V-ITS AA" \
    --start 2020-1-1 \
    --duration 14y \
    --certIssuePermissions all,1 \
    --signingCurve brainpoolp256 \
    --output aa )

  # Create AA (R-ITS) cert
  # All ITS-AIDs allowed
  ( set -x; ${CERTGENERATOR} \
    --certType explicit \
    --signerCert root.cert \
    --signerKey root.signKey \
    --certId N:"Cohda Demo R-ITS AA" \
    --start 2020-1-1 \
    --duration 14y \
    --certIssuePermissions all,1 \
    --signingCurve brainpoolp256 \
    --output aarits )

  mkdir -p ${USER_CACERTS_DIR}/
  mv *.cert *.signKey ${USER_CACERTS_DIR}/

  # import CA certs into database
  certadm_load_with_crl $(ls ${USER_CACERTS_DIR}/*.cert)

  rm -f ${USER_EU_ATCERTS_DIR}/*.acf
  # Use acfGenerator to create demo-signed certificates
  # No specific permissions
  # ... --appPermissions 0x24:b:0x01-00-00+0x25:b:0x01-00-00-00+0x8C:b:0x02-00-00-00+0x8D
  # All specific permissions
  # OBU
  ( set -x; ${ACFGENERATOR} \
    --certType explicit \
    --cracaId 0x00-00-00 \
    --crlSeries 0 \
    --start `date -u +"%Y-%m-%d"` \
    --duration 1y  \
    --appPermissions 0x24:b:0x01-FF-FC+0x25:b:0x01-FF-FF-FF+0x8C:b:0x02-FF-FF-E0+0x8D \
    --setSimultaneousCerts 20 \
    --setCount 1 \
    --setInterval 1y \
    --signerCert ${USER_CACERTS_DIR}/aa.cert \
    --signerKey ${USER_CACERTS_DIR}/aa.signKey \
    --output ${USER_EU_ATCERTS_DIR}/its )

  # Use acfGenerator to create demo-signed certificates
  # No specific permissions
  # ... --appPermissions 0x24:b:0x01-00-00+0x25:b:0x01-00-00-00+0x084081+0x084082:b:0x01+0x89:b:0x01-00+0x8a:b:0x01-00+0x8b:b:0x01-c7-00-01-00-00+0x0x27d:b:0x01+0x8d+0x27F:b:0x01
  # All specific permissions
  # R-ITS
  ( set -x; ${ACFGENERATOR} \
    --certType explicit \
    --cracaId 0x00-00-00 \
    --crlSeries 0 \
    --start `date -u +"%Y-%m-%d"` \
    --duration 1y  \
    --appPermissions 0x24:b:0x01-FF-FC+0x25:b:0x01-FF-FF-FF+0x084081+0x084082:b:0x01+0x89:b:0x01-E0+0x8a:b:0x01-C0+0x8b:b:0x01-c7-00-01-FF-FF+0x8C:b:0x02-FF-FF-E0+0x27D:b:0x01+0x8d+0x27F:b:0x01 \
    --setSimultaneousCerts 1 \
    --setCount 1 \
    --setInterval 1y \
    --assuranceLevel 0xE0 \
    --signerCert ${USER_CACERTS_DIR}/aarits.cert \
    --signerKey ${USER_CACERTS_DIR}/aarits.signKey \
    --output ${USER_EU_ATCERTS_DIR}/itsrits )

  if [ -f ${USER_EU_ATCERTS_DIR}/itsrits* ] ; then
    echo "Generated Root, AA & AT EU certs"
  fi
}

aerolink_eu_demo_obu()
{
  rm -f ${USER_EU_ATCERTS_DIR}/*.acf

  # import root cert into database
  certadm_load_with_crl $(ls ${USER_CACERTS_DIR}/*.cert)

  # Use acfGenerator to create demo-signed certificates
  # No specific permissions
  # ... --permission 0x24:0x010000,0x25:0x01000000,0x8c:0x02000000,0x8d
  # All specific permissions
  ${ACFGENERATOR} \
    --certType explicit \
    --cracaId 0x00-00-00 \
    --crlSeries 0 \
    --start `date -u +"%Y-%m-%d"` \
    --duration 1y  \
    --appPermissions 0x24:b:0x01-FF-FC+0x25:b:0x01-FF-FF-FF+0x8C:b:0x02-FF-FF-E0+0x8D+0x27E:b:0x01+0x27F:b:0x01+0x3FF \
    --setSimultaneousCerts 20 \
    --setCount 1 \
    --setInterval 1y \
    --assuranceLevel 0xE0 \
    --signerCert ${USER_CACERTS_DIR}/etsi-demo-aa.cert \
    --signerKey ${USER_CACERTS_DIR}/etsi-demo-aa.signKey \
    --output ${USER_EU_ATCERTS_DIR}/its

    if [ `ls -1 ${USER_EU_ATCERTS_DIR}/its*.acf 2>/dev/null | wc -l` -gt 0 ] ; then
        echo "Created demo-signed EU OBU certs"
    fi
}
aerolink_eu_demo_rsu()
{
  rm -f ${USER_EU_ATCERTS_DIR}/*.acf

  # import root cert into database
  certadm_load_with_crl $(ls ${USER_CACERTS_DIR}/*.cert)

  # Use acfGenerator to create demo-signed certificates
  # No specific permissions
  # ... --permission 0x24:0x010000,0x25:0x01000000,0x89:0x0100,0x8a:0x0100,0x8b:0x010000000000,0x27d:0x01,0x8d
  # All specific permissions
  ${ACFGENERATOR} \
    --certType explicit \
    --cracaId 0x00-00-00 \
    --crlSeries 0 \
    --start `date -u +"%Y-%m-%d"` \
    --duration 1y  \
    --appPermissions 0x24:b:0x01-FF-FC+0x25:b:0x01-FF-FF-FF+0x084081+0x084082:b:0x01+0x89:b:0x01-E0+0x8a:b:0x01-C0+0x8b:b:0x01-c7-00-01-FF-FF+0x8C:b:0x02-FF-FF-E0+0x8d+0x27d:b:0x01+0x27E:b:0x01+0x27F:b:0x01+0x280:b:0x01-c7-00-01-00-1D-00-28-C0-C0 \
    --setSimultaneousCerts 1 \
    --setCount 1 \
    --setInterval 1y \
    --assuranceLevel 0xE0 \
    --signerCert ${USER_CACERTS_DIR}/etsi-demo-aarits.cert \
    --signerKey ${USER_CACERTS_DIR}/etsi-demo-aarits.signKey \
    --output ${USER_EU_ATCERTS_DIR}/its

    if [ `ls -1 ${USER_EU_ATCERTS_DIR}/its*.acf 2>/dev/null | wc -l` -gt 0 ] ; then
        echo "Created demo-signed EU RSU certs"
    fi
}

aerolink_na_demo_obu()
{
  # TODO separate directory for each context?
  rm -f ${USER_STATE_DIR}/security-context/examplerse*.wsc

  rm -f ${USER_LCMS_DIR}/*/*.acf

  # import root cert into database
  certadm_load $(ls ${USER_CACERTS_DIR}/*.cert)

  # Signing certificates valid for 1 year
  START_DATE=`date -u +"%Y-%m-%d"`
  DURATION=1y

  # Generate the test certificates for OBU
  ${ACFGENERATOR} \
    --certType implicit \
    --certId n:"DemoOBU" \
    --cracaId 0x00-00-00 \
    --crlSeries 0 \
    --start "${START_DATE}" \
    --duration "${DURATION}" \
    --appPermissions 0x20 \
    --setSimultaneousCerts 20 \
    --setCount 1 \
    --setInterval 3h \
    --signerCert ${USER_CACERTS_DIR}/ieee-v3-demo-root.cert \
    --signerKey ${USER_CACERTS_DIR}/ieee-v3-demo-root.signKey \
    --output ${USER_LCMS_DIR}/bsmLcm/psid-0x20

    if [ `ls -1 ${USER_LCMS_DIR}/bsmLcm/psid-0x20*.acf 2>/dev/null | wc -l` -gt 0 ] ; then
        echo "Created demo-signed NA OBU certs"
    fi
}

aerolink_na_demo_emergency()
{
  # TODO separate directory for each context?
  rm -f ${USER_STATE_DIR}/security-context/examplerse*.wsc

  rm -f ${USER_LCMS_DIR}/*/*.acf

  # import root cert into database
  certadm_load $(ls ${USER_CACERTS_DIR}/*.cert)

  # Signing certificates valid for 1 year
  START_DATE=`date -u +"%Y-%m-%d"`
  DURATION=1y

  # Generate the test certificates for OBU (EVW support)
  ${ACFGENERATOR} \
    --certType implicit \
    --certId n:"DemoEVW" \
    --cracaId 0x00-00-00 \
    --crlSeries 0 \
    --start "${START_DATE}" \
    --duration "${DURATION}" \
    --appPermissions 0x20:0x01-01 \
    --setSimultaneousCerts 20 \
    --setCount 1 \
    --setInterval 3h \
    --signerCert ${USER_CACERTS_DIR}/ieee-v3-demo-root.cert \
    --signerKey ${USER_CACERTS_DIR}/ieee-v3-demo-root.signKey \
    --output ${USER_LCMS_DIR}/bsmLcm/psid-0x20

  if [ `ls -1 ${USER_LCMS_DIR}/bsmLcm/psid-0x20*.acf 2>/dev/null | wc -l` -gt 0 ] ; then
    echo "Created demo-signed NA OBU (EVW support) certs"
  fi
}

aerolink_na_demo_rsu()
{
  # TODO separate directory for each context?
  rm -f ${USER_STATE_DIR}/security-context/exampleobe*.wsc

  rm -f ${USER_LCMS_DIR}/*/*.acf

  # import root cert into database
  certadm_load $(ls ${USER_CACERTS_DIR}/*.cert)

  # Signing certificates valid for 1 year
  START_DATE=`date -u +"%Y-%m-%d"`
  DURATION=1y

  # Generate the test certificates for the RSU
  ${ACFGENERATOR} \
    --certType implicit \
    --certId n:"DemoRSU" \
    --cracaId 0x00-00-00 \
    --crlSeries 0 \
    --start "${START_DATE}" \
    --duration "${DURATION}" \
    --appPermissions 0x81+0x82+0x83+0x84+0x87+0x90+0x4060+0x4070+0x7293c1+0x204095+0x204097 \
    --setSimultaneousCerts 1 \
    --setCount 1 \
    --setInterval 3h \
    --signerCert ${USER_CACERTS_DIR}/ieee-v3-demo-root.cert \
    --signerKey ${USER_CACERTS_DIR}/ieee-v3-demo-root.signKey \
    --output ${USER_LCMS_DIR}/rsuLcm/RSU

    if [ `ls -1 ${USER_LCMS_DIR}/rsuLcm/RSU*.acf 2>/dev/null | wc -l` -gt 0 ] ; then
        echo "Created demo-signed NA RSU certs"
    fi
}

aerolink_na_demo_platoon()
{
  rm -f ${USER_LCMS_DIR}/*/*.acf

  # import root cert into database
  certadm_load $(ls ${USER_CACERTS_DIR}/*.cert)

  # Signing certificates valid for 1 year
  START_DATE=`date -u +"%Y-%m-%d"`
  DURATION=1y

  # Generate the test certificates for the OBU (Platooning)
  ${ACFGENERATOR} \
    --certType implicit \
    --certId n:"DemoOBU" \
    --cracaId 0x00-00-00 \
    --crlSeries 0 \
    --start "${START_DATE}" \
    --duration "${DURATION}" \
    --appPermissions 0x8E+0x203C80+0x203C81+0x203C82+0x90+0x203C83+0x203C84+0x203C85+0x20 \
    --setSimultaneousCerts 1 \
    --setCount 1 \
    --setInterval 3h \
    --signerCert ${USER_CACERTS_DIR}/ieee-v3-demo-root.cert \
    --signerKey ${USER_CACERTS_DIR}/ieee-v3-demo-root.signKey \
    --output ${USER_LCMS_DIR}/wsmLcm/WSM

    if [ `ls -1 ${USER_LCMS_DIR}/wsmLcm/WSM*.acf 2>/dev/null | wc -l` -gt 0 ] ; then
        echo "Created demo-signed NA OBU Platooning certs"
    fi

}

aerolink_eu_demo_setup()
{
  # Restore fresh aerolink config
  mkdir -p ${USER_STATE_DIR}
  mkdir -p ${USER_CONFIG_DIR}
  cp -r ${AEROLINK_EU_CONFIG}/state/* ${USER_STATE_DIR}
  cp -r ${AEROLINK_EU_CONFIG}/config/* ${USER_CONFIG_DIR}
  echo "Created aerolink state and config directories: ${USER_STATE_DIR} and ${USER_CONFIG_DIR}"
}

aerolink_eu_clear_setup()
{
  aerolink_eu_demo_setup

  # Remove demo certs & demo CRL for empty setup
  rm -f ${USER_CACERTS_DIR}/etsi-demo*
  rm -f ${USER_STATE_DIR}/crls/etsi-*
}

aerolink_hsm_mode()
{
  # Change HSM mode
  AERO_MODE=$1
  if [ ${AERO_MODE} == "hardware" ]; then
    echo "'hardware' no longer used, use 'internal' or HSM device name"
  else
    echo "Aerolink HSM mode to ${AERO_MODE}"
    sed -i 's/hsm_solution .*/hsm_solution '"${AERO_MODE}"'/' ${USER_CONFIG_DIR}/aerolink.conf
  fi
}

aerolink_verif_mode()
{
  # Change Verification mode
  AERO_MODE=$1
  if [ ${AERO_MODE} == "hardware" ]; then
    echo "'hardware' no longer used, use 'internal' or verification device name"
  else
    echo "Aerolink verification mode to ${AERO_MODE}"
    sed -i 's/verification_solution .*/verification_solution '"${AERO_MODE}"'/' ${USER_CONFIG_DIR}/aerolink.conf
  fi
}

aerolink_eu_pki_none()
{
  # Change SCMS setting
  echo "Aerolink EU PKI set to none"
  sed -i 's/pki_type .*/pki_type           none/' ${USER_CONFIG_DIR}/aerolink.conf
  sed -i 's/use_scms .*/use_scms                        false/' ${USER_STATE_DIR}/security-context/its.wsc
}

aerolink_eu_pki_etsi()
{
  # Change SCMS setting
  echo "Aerolink EU PKI set to etsi"
  sed -i 's/pki_type .*/pki_type           etsi/' ${USER_CONFIG_DIR}/aerolink.conf
  sed -i 's/use_scms .*/use_scms                        true/' ${USER_STATE_DIR}/security-context/its.wsc
}

aerolink_eu_ec_req()
{
  AERO_MODE=
  EU_EC_ID=$1
  DEV_TYPE="V"
  CURVE_TYPE="NISTP256"

  if [ $# -gt 1 ] ; then
    AERO_MODE=$2
  fi
  if [ $# -gt 2 ] ; then
    DEV_TYPE=$3
  fi
  if [ $# -gt 3 ] ; then
    CURVE_TYPE=$4
  fi

  aerolink_clear
  aerolink_eu_clear_setup
  if [ ! -z $AERO_MODE ] ; then
    aerolink_hsm_mode ${AERO_MODE}
  fi
  aerolink_eu_pki_none

  ( set -x; ${CREATEETSIINITREQUEST} \
    --canonicalId ${EU_EC_ID} --deviceType ${DEV_TYPE} --curve ${CURVE_TYPE} )
}

aerolink_eu_ec_req_bin()
{
  AERO_MODE=
  EU_EC_ID=$1
  DEV_TYPE="V"
  CURVE_TYPE="NISTP256"

  if [ $# -gt 1 ] ; then
    AERO_MODE=$2
  fi
  if [ $# -gt 2 ] ; then
    DEV_TYPE=$3
  fi
  if [ $# -gt 3 ] ; then
    CURVE_TYPE=$4
  fi

  aerolink_clear
  aerolink_eu_clear_setup
  if [ ! -z $AERO_MODE ] ; then
    aerolink_hsm_mode ${AERO_MODE}
  fi
  aerolink_eu_pki_none

  ( set -x; ${CREATEETSIINITREQUEST} \
    --binaryCanonicalId ${EU_EC_ID} --deviceType ${DEV_TYPE} --curve ${CURVE_TYPE} )
}

aerolink_eu_ec_saved()
{
  EU_SAVED_ID_DIR=$1

  if [ -e ${EU_SAVED_ID_DIR}/active ]; then
    echo -e "Copying 'active' directory from ${EU_SAVED_ID_DIR}"
    rm -rf aerolink/active
    cp -R ${EU_SAVED_ID_DIR}/active ./aerolink
  else
    echo -e "No saved 'active' directory at ${EU_SAVED_ID_DIR}"
  fi
}

aerolink_eu_ec_profile()
{
  # Update Aerolink config & certs for a given profile
  # Profile dir can be shorthand name or an actual directory

  if [ -d ${AEROLINK_DEFAULT_CONFIG}/etsi-${1} ]; then
    PROFILE_DEF_DIR=${AEROLINK_DEFAULT_CONFIG}/etsi-${1}
    EU_EC_PROFILE=${1}
    echo -e "Using ${EU_EC_PROFILE} profile"
  elif [ -d ${1} ]; then
    PROFILE_DEF_DIR=${1}
    EU_EC_PROFILE=$(basename ${1})
    EU_EC_PROFILE=${EU_EC_PROFILE##etsi-}
    echo -e "Using ${EU_EC_PROFILE} profile"
  else
    echo -e "No available profile for ${1}"
  fi

  # check internet connectivity
  ping -q -W 2 -c 1 www.google.com > /dev/null
  if [ $? -ne 0 ] ; then
    echo -e "No DNS"

    ping -q -W 2 -c 1 8.8.8.8 > /dev/null
    if [ $? -ne 0 ] ; then
      echo -e "No internet connectivity"
    fi
  else
    echo -e "Internet connectivity OK..."
  fi

  # updated Aerolink config for this profile
  if [ -d ${PROFILE_DEF_DIR} ] ; then
    echo -e "Updating Aerolink config from ${PROFILE_DEF_DIR}..."

    if [ -d ${PROFILE_DEF_DIR}/config ]; then
      cp -R ${PROFILE_DEF_DIR}/config/* ${USER_CONFIG_DIR}
    fi
    if [ -d ${PROFILE_DEF_DIR}/state ]; then
      cp -R ${PROFILE_DEF_DIR}/state/* ${USER_STATE_DIR}
    fi

    # updated CA/CRL for this profile
    if [ -x ${PROFILE_DEF_DIR}/update.sh ] ; then
      rm -rf ${EU_EC_PROFILE}
      mkdir -p ${EU_EC_PROFILE}
      cp ${PROFILE_DEF_DIR}/update.sh ${EU_EC_PROFILE}
      cp ${AEROLINK_DEFAULT_CONFIG}/etsi-cpoc/fetch-cpoc.sh ${EU_EC_PROFILE}
      # Set Aerolink env for convenience, in case Aerolink utils required
      echo -e "Updating CA/CRLs..."
      ( export ${AEROLINK_PATHS} PATH=${AEROLINK_TOOLS}:$PATH; cd ${EU_EC_PROFILE}; ./update.sh )
    fi

    # And initialise Aerolink for PKI operation
    aerolink_eu_ec_resp ./${EU_EC_PROFILE}

    if [ -x ${PROFILE_DEF_DIR}/post.sh ] ; then
      echo -e "Post initialisation actions..."
      ( export ${AEROLINK_PATHS} PATH=${AEROLINK_TOOLS}:$PATH; ./${PROFILE_DEF_DIR}/post.sh )
    fi

  else
    echo -e "Profile directory ${PROFILE_DEF_DIR} not found"
  fi
}

aerolink_eu_ec_cleandcs()
{
  # Delete known obsolete PKI DCs (Distribution Centre)
  # Aerolink has to query all PKIs in ECTL to try to fetch CRLs & get CTL information
  # But obsolete PKI DC addresses can still be in ECTL causing delays in Aerolink as connections fail
  # This option removes the known obsolete PKI DCs from Aerolink's ctl store
  # Note the CA certificates from ECTL remain in the LCM
  # Feel free to add to/remove from this list 
  OLD_PKI_DCS="2620105587473bfa.dc 85987527ee188a49.dc c50756dca2eb0ec1.dc 327a270aabcb9672.dc 3bc2562d2165a3c4.dc"

  echo -e "Removing obsolete PKI DCs from ${USER_STATE_DIR}/ctls"
  for DC in ${OLD_PKI_DCS} ; do
    if [ -e ${USER_STATE_DIR}/ctls/${DC} ] ; then
      more ${USER_STATE_DIR}/ctls/${DC}
      rm -f ${USER_STATE_DIR}/ctls/${DC}
    fi
  done
}

aerolink_eu_ec_resp()
{
  EU_EC_DIR=$1

  aerolink_eu_pki_none

  if [ -e  ${EU_EC_DIR}/eaurl ] ; then
    EAURL_OPT="--eaUrl "
    EAURL_OPT+=`cat ${EU_EC_DIR}/eaurl`
  fi

  ( set -x; ${PROCESSETSIINITRESPONSE} \
    --tlm ${EU_EC_DIR}/tlm* \
    --ectl ${EU_EC_DIR}/ectl* \
    --crl ${EU_EC_DIR}/crl* \
    --ctl ${EU_EC_DIR}/ctl* \
    ${EAURL_OPT} )

  aerolink_eu_pki_etsi
}

aerolink_eu_ec_info()
{
  ( set -x; ${CANONICALDATAREADER} )
}

aerolink_na_demo_setup()
{
  # Restore fresh aerolink config
  mkdir -p ${USER_STATE_DIR}
  mkdir -p ${USER_CONFIG_DIR}
  cp -r ${AEROLINK_NA_CONFIG}/state/* ${USER_STATE_DIR}
  cp -r ${AEROLINK_NA_CONFIG}/config/* ${USER_CONFIG_DIR}
  echo "Created aerolink state and config directories: ${USER_STATE_DIR} and ${USER_CONFIG_DIR}"
}

aerolink_na_scms_ecrequest()
{
  SECURITY_CONTEXT=$1
  LCM_NAME=$2
  PERMISSION=$3
  CERTS_DIR=$4

  CERTID=$(fw_printenv serial | cut -d - -f 2)
  if [ -z $CERTID ] ; then
    CERTID=$(date +%s)
  fi
  CERTID=$(echo $CERTID | rev | cut -c 1-12 | rev)

  START_DATE=`date +"%Y-%m-%d"`
  DURATION=1y
  SCMS_REQUEST_DIR=${PERSISTDIR}/scms/request

  ${CREATEECREQUEST} \
    --contextName ${SECURITY_CONTEXT} \
    --lcmName ${LCM_NAME} \
    --certId n:"$CERTID" \
    --start ${START_DATE} \
    --duration ${DURATION} \
    --region countryOnly:840 \
    --certReqPermissions ${PERMISSION}

  mkdir -p ${SCMS_REQUEST_DIR}
  cp ${CERTS_DIR}/*.oer ${SCMS_REQUEST_DIR}
  cp ${CERTS_DIR}/enrollment.prikey ${SCMS_REQUEST_DIR}

  SCMS_REQUEST_OER=`ls ${SCMS_REQUEST_DIR}/*.oer`
  echo "Zip ${SCMS_REQUEST_OER} with other requests and upload to SCMS"
}

aerolink_na_scms_ecrequest_obu()
{
  aerolink_na_scms_ecrequest exampleobe.wsc bsmLcm 0x20+0x26+0x204096 ${USER_LCMS_DIR}/bsmLcm
}

aerolink_na_scms_ecrequest_rsu()
{
  aerolink_na_scms_ecrequest examplerse.wsc rsuLcm 0x87+0x82+0x83+0x84+0x204095+0x204097 ${USER_LCMS_DIR}/rsuLcm
}

aerolink_na_scms_ecresponse()
{
  SECURITY_CONTEXT=$1
  LCM_NAME=$2
  CERTS_DIR=$3

  START_DATE=`date +"%Y-%m-%d"`
  DURATION=1y
  SCMS_REQUEST_DIR=${PERSISTDIR}/scms/request
  SCMS_RESPONSE_DIR=${PERSISTDIR}/scms/response

  # Try to figure out which response to pick
  if [ ! -f ${CERTS_DIR}/*.oer ] ; then
    echo "Enrollment Request is not found at ${CERTS_DIR}. Try ${SCMS_REQUEST_DIR}"
    if [ ! -f ${SCMS_REQUEST_DIR}/*.oer ] ; then
      echo "Enrollment Request is not found ${SCMS_REQUEST_DIR}. Give up"
      return
    else
      SCMS_REQUEST_OER=`ls ${SCMS_REQUEST_DIR}/*.oer`
    fi
  else
      SCMS_REQUEST_OER=`ls ${CERTS_DIR}/*.oer`
  fi

  SCMS_REQUEST_OER=`echo $(basename ${SCMS_REQUEST_OER}) | cut -d '.' -f 1 -`

  ${PROCESSECRESPONSE} \
    --contextName ${SECURITY_CONTEXT} \
    --lcmName ${LCM_NAME} \
    --enrollmentResponse ${SCMS_RESPONSE_DIR}/${SCMS_REQUEST_OER}/enrollment.oer \
    --enrollmentReconstruction ${SCMS_RESPONSE_DIR}/${SCMS_REQUEST_OER}/enrollment.s \
    --lccf ${SCMS_RESPONSE_DIR}/LCCF.oer \
    --lpf ${SCMS_RESPONSE_DIR}/LPF.oer \
    --root ${SCMS_RESPONSE_DIR}/root.oer \
    --eca ${SCMS_RESPONSE_DIR}/${SCMS_REQUEST_OER}/ECA.oer \
    --ra ${SCMS_RESPONSE_DIR}/${SCMS_REQUEST_OER}/RA.oer \
    --crl ${SCMS_RESPONSE_DIR}/CRL.oer

  # Install issuer cert for TLS connection
  mkdir -p /etc/ssl/certs
  cp ${SCMS_RESPONSE_DIR}/root.tls* /etc/ssl/certs
}

aerolink_na_scms_ecresponse_obu()
{
  aerolink_na_scms_ecresponse exampleobe.wsc bsmLcm ${USER_LCMS_DIR}/bsmLcm
}

aerolink_na_scms_ecresponse_rsu()
{
  aerolink_na_scms_ecresponse examplerse.wsc rsuLcm ${USER_LCMS_DIR}/rsuLcm
}

aerolink_na_scms_export()
{
  SCMS_EXPORT_DIR=scms/export

  mkdir -p ${SCMS_EXPORT_DIR}
  # Back up SCMS state/certificates
  cp ${USER_STATE_DIR}/crypto.state ${SCMS_EXPORT_DIR}
  cp -r ${USER_STATE_DIR}/wscs ${SCMS_EXPORT_DIR}
  cp -r ${USER_LCMS_DIR} ${SCMS_EXPORT_DIR}

  echo "Exported scms state/certificates to ${SCMS_EXPORT_DIR}"
}

aerolink_na_scms_import()
{
  SCMS_EXPORT_DIR=scms/export
  SCMS_CRYPTO_STATE=${SCMS_EXPORT_DIR}/crypto.state
  SCMS_WSCS=${SCMS_EXPORT_DIR}/wscs
  SCMS_CERTS=${SCMS_EXPORT_DIR}/certificates

  if [ ! -f ${SCMS_CRYPTO_STATE} ] ; then
    echo "Missing ${SCMS_CRYPTO_STATE} in SCMS export"
    return
  fi
  if [ ! -d ${SCMS_WSCS} ] ; then
    echo "Missing ${SCMS_WSCS} in SCMS export"
    return
  fi
  if [ ! -d ${SCMS_CERTS} ] ; then
    echo "Missing ${SCMS_CERTS} in SCMS export"
    return
  fi

  # Back up SCMS state/certificates
  cp scms/export/crypto.state ${USER_STATE_DIR}/
  cp -r scms/export/wscs ${USER_STATE_DIR}/
  cp -r scms/export/certificates ${USER_STATE_DIR}/

  echo "Imported scms state/certificates from ${SCMS_EXPORT_DIR}"
}

aerolink_eu_cohda_load()
{
  if [ ! -d ${CERT_DIR} ] ; then
    echo "Cert directory (${CERT_DIR}) doesn't exist"
    return
  fi

  echo "Import Cohda ETSI certificates"

  aerolink_eu_clear_setup

  cp root-certificate/* ${USER_CACERTS_DIR}
  cp signing-certificates/* ${USER_CACERTS_DIR}
  # import root cert into database
  certadm_load $(ls ${USER_CACERTS_DIR}/*.cert)
}

aerolink_cn_demo_setup()
{
  # Restore fresh aerolink config
  mkdir -p ${USER_STATE_DIR}
  mkdir -p ${USER_CONFIG_DIR}
  cp -r ${AEROLINK_CN_CONFIG}/state/* ${USER_STATE_DIR}
  cp -r ${AEROLINK_CN_CONFIG}/config/* ${USER_CONFIG_DIR}
  echo "Created aerolink state and config directories: ${USER_STATE_DIR} and ${USER_CONFIG_DIR}"
}

aerolink_cn_demo_obu()
{
  # TODO separate directory for each context?
  rm -f ${USER_STATE_DIR}/security-context/examplerse*.wsc

  rm -f ${USER_CN_ATCERTS_DIR}/*.acf

  # import root cert into database
  certadm_load $(ls ${USER_CACERTS_DIR}/*.cert)

  # Signing certificates valid for 1 year
  START_DATE=`date -u +"%Y-%m-%d"`
  DURATION=1y

  # Generate the test certificates for OBU
  ${ACFGENERATOR} \
    --certType explicit \
    --certId n:"DemoOBU" \
    --start "${START_DATE}" \
    --duration "${DURATION}" \
    --appPermissions 0x6f+0x70+0x71+0x72 \
    --setSimultaneousCerts 20 \
    --setCount 1 \
    --setInterval 3h \
    --signerCert ${USER_CACERTS_DIR}/ccsa-demo-pca.cert \
    --signerKey ${USER_CACERTS_DIR}/ccsa-demo-pca.signKey \
    --signingCurve sm2 \
    --output ${USER_CN_ATCERTS_DIR}/ccsa

    if [ `ls -1 ${USER_CN_ATCERTS_DIR}/ccsa-*.acf 2>/dev/null | wc -l` -gt 0 ] ; then
        echo "Created demo-signed CN OBU certs"
    fi
}

aerolink_cn_demo_rsu()
{
  # TODO separate directory for each context?
  rm -f ${USER_STATE_DIR}/security-context/exampleobe*.wsc

  rm -f ${USER_CN_ATCERTS_DIR}/*.acf

  # import root cert into database
  certadm_load $(ls ${USER_CACERTS_DIR}/*.cert)

  # Signing certificates valid for 1 year
  START_DATE=`date -u +"%Y-%m-%d"`
  DURATION=1y

  ${ACFGENERATOR} \
    --certType explicit \
    --certId n:"DemoRSU" \
    --start "${START_DATE}" \
    --duration "${DURATION}" \
    --appPermissions 0xe22+0xe23+0xe24+0xe25+0xe26+0xe27 \
    --setSimultaneousCerts 1 \
    --setCount 1 \
    --setInterval 3h \
    --signerCert ${USER_CACERTS_DIR}/ccsa-demo-root.cert \
    --signerKey ${USER_CACERTS_DIR}/ccsa-demo-root.signKey \
    --signingCurve sm2 \
    --output ${USER_CN_ATCERTS_DIR}/ccsa

    if [ `ls -1 ${USER_CN_ATCERTS_DIR}/ccsa-*.acf 2>/dev/null | wc -l` -gt 0 ] ; then
        echo "Created demo-signed CN RSU certs"
    fi
}

##############################################################################
# main
##############################################################################

PATH=/opt/cohda/bin:$PATH

if [ $# -eq 0 ] ; then
    echo -e "\nTry '$0 help' ?"
fi

while [ $# -gt 0 ] ; do
  case $1 in
    "env")
      aerolink_env
      ;;
    "clear")
      aerolink_clear
      ;;
    "check")
      aerolink_check
      ;;
    "hw-check")
      aerolink_hw_check
      ;;
    "cert-check")
      aerolink_cert_check
      ;;
    "eu-demo-gen")
      aerolink_eu_demo_generate
      ;;
    "eu-demo-setup")
      aerolink_eu_demo_setup
      ;;
    "eu-demo-obu")
      if [ ! -r ${USER_STATE_DIR} ] ; then
        aerolink_eu_demo_setup
      fi
      aerolink_eu_demo_obu
      ;;
    "eu-demo-rsu")
      if [ ! -r ${USER_STATE_DIR} ] ; then
        aerolink_eu_demo_setup
      fi
      aerolink_eu_demo_rsu
       ;;
    "na-demo-setup")
      aerolink_na_demo_setup
      ;;
    "na-demo-obu")
      if [ ! -r ${USER_STATE_DIR} ] ; then
        aerolink_na_demo_setup
      fi
      aerolink_na_demo_obu
      ;;
    "na-demo-emergency")
      if [ ! -r ${USER_STATE_DIR} ] ; then
        aerolink_na_demo_setup
      fi
      aerolink_na_demo_emergency
      ;;
    "na-demo-rsu")
      if [ ! -r ${USER_STATE_DIR} ] ; then
        aerolink_na_demo_setup
      fi
      aerolink_na_demo_rsu
      ;;
    "na-demo-platoon")
      if [ ! -r ${USER_STATE_DIR} ] ; then
        aerolink_na_demo_setup
      fi
      aerolink_na_demo_platoon
      ;;
    "cn-demo-setup")
      aerolink_cn_demo_setup
      ;;
    "cn-demo-obu")
      if [ ! -r ${USER_STATE_DIR} ] ; then
        aerolink_cn_demo_setup
      fi
      aerolink_cn_demo_obu
      ;;
    "cn-demo-rsu")
      if [ ! -r ${USER_STATE_DIR} ] ; then
        aerolink_cn_demo_setup
      fi
      aerolink_cn_demo_rsu
      ;;
    "eu-empty-setup")
      aerolink_eu_clear_setup
      ;;
    "aerolink-hsm-mode")
      aerolink_hsm_mode $2
      shift
      ;;
    "aerolink-verif-mode")
      aerolink_verif_mode $2
      shift
      ;;
    "eu-pki-none")
      aerolink_eu_pki_none
      ;;
    "eu-pki-etsi")
      aerolink_eu_pki_etsi
      ;;
    "eu-pki-ec-req")
      aerolink_eu_ec_req $2 $3 $4 $5
      shift
      shift
      shift
      shift
      ;;
    "eu-pki-ec-req-bin")
      aerolink_eu_ec_req_bin $2 $3 $4 $5
      shift
      shift
      shift
      shift
      ;;
    "eu-pki-ec-saved")
      aerolink_eu_ec_saved $2
      shift
      ;;
    "eu-pki-ec-profile")
      aerolink_eu_ec_profile $2
      shift
      ;;
    "eu-pki-ec-clean-dcs")
      aerolink_eu_ec_cleandcs
      ;;
    "eu-pki-ec-resp")
      aerolink_eu_ec_resp $2
      shift
      ;;
    "eu-pki-ec-info")
      aerolink_eu_ec_info
      ;;
    "eu-cms-load")
      aerolink_eu_cms_load
      # Shift out the (up to) two optional parameters
      shift
      shift
      ;;
    "eu-etsi-load")
      aerolink_eu_etsi_load
      # Shift out the (up to) two optional parameters
      shift
      shift
      ;;
    "eu-stack-conf")
      aerolink_eu_stack_conf
      ;;
    "eu-ghs-sw-load")
      aerolink_eu_ghs_sw_load
      # Shift out the (up to) one optional parameter
      shift
      ;;
    "eu-ghs-hw-load")
      aerolink_eu_ghs_hw_load
      # Shift out the (up to) one optional parameter
      shift
      ;;
    "na-ghs-sw-load")
      aerolink_na_ghs_sw_load
      # Shift out the (up to) one optional parameter
      shift
      ;;
    "na-ghs-hw-load")
      aerolink_na_ghs_hw_load
      # Shift out the (up to) one optional parameter
      shift
      ;;
    "na-ttw-load")
      aerolink_na_ttw_load
      # Shift out the (up to) one optional parameter
      shift
      ;;
    "na-scms-ecrequest-obu")
      aerolink_na_scms_ecrequest_obu
      ;;
    "na-scms-ecresponse-obu")
      aerolink_na_scms_ecresponse_obu
      ;;
    "na-scms-ecrequest-rsu")
      aerolink_na_scms_ecrequest_rsu
      ;;
    "na-scms-ecresponse-rsu")
      aerolink_na_scms_ecresponse_rsu
      ;;
    "na-scms-export")
      aerolink_na_scms_export
      ;;
    "na-scms-import")
      aerolink_na_scms_import
      ;;
    "eu-cohda-load")
      aerolink_eu_cohda_load
      ;;
    *)
      echo "Usage: $0 <option> [<options....>]"
      echo "    #### Common operations ####"
      echo "       env            - show the environment variables to allow Aerolink commands to run"
      echo "       clear          - clears the Aerolink config, emptying LCM and deleting existing pseudonym certs"
      echo "       check          - checks the Aerolink config and other directory locations (includes cert-check)"
      echo "       hw-check       - perform simple hardware checks on HSM (and verification acceleration if available)"
      echo "       cert-check     - check installed and downloaded CA & AT certificates"
      echo "       aerolink-hsm-mode   - set Aerolink HSM operating mode (internal or device type)"
      echo "       aerolink-verif-mode - set Aerolink verification operating mode (internal or device type)"
      echo "    #### Demo certificates ####"
      echo "       eu-demo-gen    - generate whole new example certificate chain of EU certs"
      echo "       eu-demo-setup  - setup the active EU config with the default demo certs"
      echo "       eu-demo-obu    - setup the active EU config with a new set of V-ITS (OBU) AT certs"
      echo "       eu-demo-rsu    - setup the active EU config with a new set of R-ITS (RSU) AT certs"
      echo "       na-demo-setup  - setup the active NA config with the default demo certs"
      echo "       na-demo-obu    - setup the active NA config with a new set of OBU pseudonym certs"
      echo "       na-demo-rsu    - setup the active NA config with a new set of RSU certs"
      echo "       cn-demo-setup  - setup the active CN config with the default demo certs"
      echo "       cn-demo-obu    - setup the active CN config with a new set of OBU pseudonym certs"
      echo "       cn-demo-rsu    - setup the active CN config with a new set of RSU certs"
      echo "    #### PKI helpers ####"
      echo "       eu-empty-setup - setup an empty EU config (no demo certs)"
      echo "       eu-pki-none    - set Aerolink PKI setting to none"
      echo "       eu-pki-etsi    - set Aerolink PKI setting to etsi"
      echo "       eu-pki-ec-req  - create Aerolink EC details with specified canonical ID (in optional hsm mode)"
      echo "       eu-pki-ec-req-bin - create Aerolink EC details with specified BINARY canonical ID (in optional hsm mode)"
      echo "       eu-pki-ec-saved - restore saved Aerolink software EC details from specified directory"
      echo "       eu-pki-ec-profile - update Aerolink software EC details & fetch certs from profile directory"
      echo "       eu-pki-ec-resp - process EC response data from specified directory"
      echo "       eu-pki-ec-info - show EC information (canonical IDs)"
      echo "       eu-pki-ec-clean-dcs - Remove known obsolete PKI DCs from CTL store
      echo "    #### Importing certificate ####"
      echo "       [default certificate location: ${CERT_DIR}]"
      echo "       eu-cms-load    - setup using files for a CMS conformance session"
      echo "       eu-cohda-load  - setup using files from Cohda"
      echo "       eu-etsi-load   - setup using files from ETSI system"
      echo "       eu-ghs-sw-load - setup using files from the GHS/ETSI Plugtest in software mode"
      echo "       eu-ghs-hw-load - setup using files from the GHS/ETSI Plugtest in hardware mode"
      echo "       na-ghs-load    - setup using files from the GHS/Plugfest SCMS"
      echo "       na-ghs-sw-load - setup using files from the GHS/Plugfest SCMS in software mode"
      echo "       na-ghs-hw-load - setup using files from the GHS/Plugfest SCMS in hardware mode"
      echo "       na-ttw-load    - setup using files for the Spirent TTW tool"
      break
      break
      ;;
  esac
  shift
done

exit 0
